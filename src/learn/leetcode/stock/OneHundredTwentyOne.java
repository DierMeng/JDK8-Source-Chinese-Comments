package learn.leetcode.stock;

/**
 * 给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。 
 * 
 *  如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。 
 * 
 *  注意：你不能在买入股票前卖出股票。 
 * 
 *  
 * 
 *  示例 1: 
 * 
 *  输入: [7,1,5,3,6,4]
 * 输出: 5
 * 解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
 *      注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。
 *  
 * 
 *  示例 2: 
 * 
 *  输入: [7,6,4,3,1]
 * 输出: 0
 * 解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
 *  
 *  Related Topics 数组 动态规划 
 */
public class OneHundredTwentyOne {

    /**
     * 动态规划
     *  1.状态 dp[i][j] 表示：在下标为 i 的这一天，用户手上持股状态为 j 所获得的最大利润。
     *      j 只有 2 个值：0 表示不持股（特指卖出股票以后的不持股状态），1 表示持股。
     *      「用户手上不持股」不代表用户一定在下标为 i 的这一天把股票抛售了；
     *  2.状态转移
     *      dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i]);
     *      dp[i][1] = max(dp[i - 1][1], -prices[i]);
     */
    public int maxProfit(int[] prices) {
        int length = prices.length;
        if (length < 2) {
            return 0;
        }
        // 0：用户手上不持股所能获得的最大利润，特指卖出股票以后的不持股，非指没有进行过任何交易的不持股
        // 1：用户手上持股所能获得的最大利润

        // 注意：因为题目限制只能交易一次，因此状态只可能从 1 到 0，不可能从 0 到 1
        int[][] dp = new int[length][2];
        dp[0][0] = 0;
        dp[0][1] = -prices[0];
        for (int i = 1; i < length; i++) {
            dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1] + prices[i]);
            dp[i][1] = Math.max(dp[i - 1][1], -prices[i]);
        }
        return dp[length - 1][0];
    }
}
